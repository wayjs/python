01、面向过程编程
		面向过程：核心是过程二字，过程指的是解决问题的步骤，设计一条流水线，机械式的思维方式。
		优点：把复杂问题流程化，进而简单化
		缺点：可扩展性差
		应用场景：系统检测、自动部署脚本
02、面向对象编程
		面向对象：核心是对象二字，对象就是特征和技能的结合体
		优点：可扩展性强
		缺点：编程复杂度高
		应用场景：用户需求经常变化，互联网应用、游戏、企业内部应用、
03、定义类与实例化出对象
		类就是一些列对象相似的特征与技能的结合体
		强调：站在不同的角度，得到的分类也不同
		
		在现实世界中：一定是先有对象，后有类
		在程序中：一定先定义类，后调用类产生对象
		class Student:
			school = "北京林业大学"  #数据属性
			def learn(self):   # 函数属性
				print("is learning")
			def eat(self):
				print("is eating")

		#后产生对象(实例化)
		stu1 = Student()
		print(stu1)
		
		打印：<__main__.Student object at 0x000001D5BAA28080>
				
04、如何使用类	属性访问语法：用 . 
		类在定义阶段就已经执行
		查看类的命名空间：Student.__dict__
		属性：增，删，改，查
		一、属性操作
		二、实例化出对象
		Student()  类名加括号，类体并没有执行，类体在定义时候已经执行。

05、如何使用对象
		__init__方法用来为对象定制对象自己独有的特征
06、属性查找与绑定方法
07、python中一切皆为对象
08、继承：继承是类与类之间的关系，是一种什么“是”什么的关系，继承的功能之一就是解决代码重用问题。
	8.1查看继承
	8.2经典类和新式类，mro列表

09、派生：子类可以添加自己新的属性或者在自己这里重新定义这些属性（不会影响父类）
	9.1在子类中调用父类的方法
		方式一：指名道姓，即 父类名.父类方法()  People.__init__(self,name,age,sex)  不依赖继承
		方式二：super() ，即 super(Student,self).__init__(name,age,sex)   super(Student,self)相当于实例本身，在python3中super()等同于 super(Student,self) ，依赖继承，即使没有直接继承关系，super()依然会按照mro继续往后查找
	ps:子类属性查找  属性查找顺序：1.对象__init__ 2.自己的类中 3.父类    self ,谁调用，self,指的就是谁  ，只要找到函数属性名相同，就会停止，如果传递的参数不同，则报错，切记
10、组合：在一个类中以另外一个类的对象作为数据属性，称为类的组合
代码重用的解决方案：1.继承2.组合
11、抽象类：抽象类的本质还是类，指的是一组类的相似性，包括数据属性和函数属性，而接口只强调函数属性的相似性
		抽象类，可以用来实现归一化设计。
12、反射：通过字符串映射类对象的属性
		
		